syntax = "proto3";

package quantum;

option go_package = "github.com/shivadeepak99/quantum-image-shield/backend/pkg/grpc/quantum";

// ðŸ”® Quantum Image Encryption Service
// gRPC interface between Go API and Python quantum core
service QuantumEncryptionService {
  // Encrypt an image with quantum randomness
  rpc EncryptImage (EncryptRequest) returns (EncryptResponse);
  
  // Decrypt an encrypted image
  rpc DecryptImage (DecryptRequest) returns (DecryptResponse);
  
  // Health check
  rpc Ping (PingRequest) returns (PingResponse);
}

// ===== ENCRYPTION =====

message EncryptRequest {
  bytes image_data = 1;           // Raw image bytes
  string purity_level = 2;        // "maximum", "balanced", or "fast"
  string password = 3;            // Optional password for key derivation
  string format = 4;              // Image format hint: "png", "jpeg", etc.
}

message EncryptResponse {
  bytes encrypted_image = 1;      // Encrypted image bytes
  bytes key_data = 2;             // Serialized .npz key data
  EncryptionMetadata metadata = 3;
}

message EncryptionMetadata {
  uint64 xor_key_length = 1;
  uint64 permutation_size = 2;
  string purity_level = 3;
  uint32 original_width = 4;
  uint32 original_height = 5;
  string original_format = 6;
  double entropy_original = 7;
  double entropy_encrypted = 8;
  double pixel_change_rate = 9;
}

// ===== DECRYPTION =====

message DecryptRequest {
  bytes encrypted_image = 1;      // Encrypted image bytes
  bytes key_data = 2;             // Serialized .npz key data
  string password = 3;            // Password if key is encrypted
}

message DecryptResponse {
  bytes decrypted_image = 1;      // Original image bytes
  DecryptionMetadata metadata = 2;
}

message DecryptionMetadata {
  uint32 width = 1;
  uint32 height = 2;
  string format = 3;
  bool lossless = 4;              // Verification flag
}

// ===== HEALTH CHECK =====

message PingRequest {
  string message = 1;
}

message PingResponse {
  string message = 1;
  string version = 2;
  bool quantum_ready = 3;         // Is Qiskit initialized?
}
